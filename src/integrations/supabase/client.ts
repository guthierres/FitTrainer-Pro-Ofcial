// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// REMOVA ESTA LINHA: export { verifyStudentAccess } from './client';

const SUPABASE_URL = "https://hznkaddifujgchqlvqsb.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imh6bmthZGRpZnVqZ2NocWx2cXNiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTcwNzM2MjAsImV4cCI6MjA3MjY0OTYyMH0._b5NiAqeD0R4Xrj9VzUMCKsFW0YOgC6Gwg4ecD4XXXM";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  },
  global: {
    headers: {
      'x-client-info': 'fittrainer-pro@1.0.0',
    },
  },
});

// Helper function to set student context for public access
export const setStudentContext = async (studentNumber?: string, studentToken?: string) => {
  if (studentNumber || studentToken) {
    try {
      // Clear any existing auth session for public access
      await supabase.auth.signOut();
      
      // Use multiple approaches to ensure context is set
      const promises = [];
      
      if (studentNumber) {
        promises.push(
          supabase.rpc('set_config', {
            setting_name: 'app.current_student_number',
            setting_value: studentNumber,
            is_local: true
          })
        );
      }
      
      if (studentToken) {
        promises.push(
          supabase.rpc('set_config', {
            setting_name: 'app.current_student_token',
            setting_value: studentToken,
            is_local: true
          })
        );
      }
      
      // Set context using our custom function
      const contextData = JSON.stringify({
        student_number: studentNumber || null,
        student_token: studentToken || null
      });
      
      promises.push(
        supabase.rpc('set_config', {
          setting_name: 'app.student_context',
          setting_value: contextData,
          is_local: true
        })
      );
      
      await Promise.allSettled(promises);
      console.log('Contexto do aluno definido com sucesso:', { studentNumber, studentToken });
      
    } catch (error) {
      console.error('Erro ao definir contexto do aluno:', error);
    }
  } else {
    // Clear student context
    try {
      await Promise.allSettled([
        supabase.rpc('set_config', {
          setting_name: 'app.current_student_number',
          setting_value: '',
          is_local: true
        }),
        supabase.rpc('set_config', {
          setting_name: 'app.current_student_token',
          setting_value: '',
          is_local: true
        }),
        supabase.rpc('set_config', {
          setting_name: 'app.student_context',
          setting_value: '{}',
          is_local: true
        })
      ]);
    } catch (error) {
      console.warn('Erro ao limpar contexto do aluno:', error);
    }
  }
};

// Helper function to verify student access
export const verifyStudentAccess = async (studentNumber: string) => {
  try {
    console.log('Verificando acesso do aluno para número:', studentNumber);
    
    if (!studentNumber || studentNumber.trim() === '') {
      return { 
        success: false, 
        error: 'Número do aluno é obrigatório' 
      };
    }
    
    // First, try to find the student without context to verify existence
    const { data: studentData, error } = await supabase
      .from('students')
      .select('id, name, unique_link_token, active, personal_trainer_id')
      .eq('student_number', studentNumber)
      .single();

    if (error || !studentData) {
      console.error('Falha na verificação do aluno:', error);
      return { 
        success: false, 
        error: 'Aluno não encontrado. Verifique o número do aluno.' 
      };
    }

    if (!studentData.active) {
      return { 
        success: false, 
        error: 'Este aluno está inativo. Entre em contato com seu personal trainer.' 
      };
    }

    if (!studentData.unique_link_token) {
      return { 
        success: false, 
        error: 'Link do aluno inválido. Entre em contato com seu personal trainer.' 
      };
    }

    console.log('Aluno verificado:', studentData);
    
    // Set context with both student number and token
    await setStudentContext(studentNumber, studentData.unique_link_token);
    
    return { 
      success: true, 
      student: studentData 
    };
  } catch (error) {
    console.error('Erro ao verificar acesso do aluno:', error);
    return { 
      success: false, 
      error: 'Erro interno. Tente novamente ou entre em contato com seu personal trainer.' 
    };
  }
};