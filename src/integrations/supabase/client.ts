// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://hznkaddifujgchqlvqsb.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imh6bmthZGRpZnVqZ2NocWx2cXNiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTcwNzM2MjAsImV4cCI6MjA3MjY0OTYyMH0._b5NiAqeD0R4Xrj9VzUMCKsFW0YOgC6Gwg4ecD4XXXM";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  },
  global: {
    headers: {
      'x-client-info': 'fittrainer-pro@1.0.0',
    },
  },
});

// Helper function to set student context for public access
export const setStudentContext = async (studentNumber?: string, studentToken?: string) => {
  if (studentNumber || studentToken) {
    try {
      const claims = {
        ...(studentNumber && { student_number: studentNumber }),
        ...(studentToken && { student_token: studentToken }),
        iss: 'fittrainer-pro',
        aud: 'anon',
        role: 'anon',
        exp: Math.floor(Date.now() / 1000) + 3600
      };
      
      console.log('Setting student context with claims:', claims);
      
      // Set the custom claims in the request context
      const customToken = createCustomJWT(claims);
      
      // Update the client headers to include the custom claims
      supabase.rest.headers = {
        ...supabase.rest.headers,
        'Authorization': `Bearer ${customToken}`,
      };
      
      console.log('Student context set successfully');
    } catch (error) {
      console.error('Error setting student context:', error);
    }
  }
};

// Enhanced helper function to create a custom JWT for student context
const createCustomJWT = (claims: any) => {
  try {
    // Create a proper JWT structure for RLS context
    const header = {
      alg: 'HS256',
      typ: 'JWT'
    };
    
    const payload = {
      ...claims,
      iat: Math.floor(Date.now() / 1000),
      exp: Math.floor(Date.now() / 1000) + 3600
    };
    
    const encodedHeader = btoa(JSON.stringify(header)).replace(/=/g, '');
    const encodedPayload = btoa(JSON.stringify(payload)).replace(/=/g, '');
    
    return `${encodedHeader}.${encodedPayload}.signature`;
  } catch (error) {
    console.error('Error creating custom JWT:', error);
    return '';
  }
};